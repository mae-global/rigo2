// Code generated by protoc-gen-go.
// source: ri.proto
// DO NOT EDIT!

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	ri.proto

It has these top-level messages:
	PBiValue
	PBi
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PBt int32

const (
	PBt_STRING              PBt = 0
	PBt_TOKEN               PBt = 1
	PBt_INT                 PBt = 2
	PBt_FLOAT               PBt = 3
	PBt_STRINGARRAY         PBt = 4
	PBt_TOKENARRAY          PBt = 5
	PBt_INTARRAY            PBt = 6
	PBt_FLOATARRAY          PBt = 7
	PBt_BOOLEAN             PBt = 8
	PBt_COLOR               PBt = 9
	PBt_POINT               PBt = 10
	PBt_COLORARRAY          PBt = 11
	PBt_POINTARRAY          PBt = 12
	PBt_INTERVAL            PBt = 13
	PBt_NORMAL              PBt = 14
	PBt_HPOINT              PBt = 15
	PBt_MATRIX              PBt = 16
	PBt_BASIS               PBt = 17
	PBt_BOUND               PBt = 18
	PBt_LIGHTHANDLE         PBt = 19
	PBt_OBJECTHANDLE        PBt = 20
	PBt_SHADERHANDLE        PBt = 21
	PBt_ARCHIVEHANDLE       PBt = 22
	PBt_FILTERFUNC          PBt = 23
	PBt_ERRORHANDLE         PBt = 24
	PBt_PROCSUBDIVFUNC      PBt = 25
	PBt_PROC2SUBDIVFUNC     PBt = 26
	PBt_PROC2BOUNDFUNC      PBt = 27
	PBt_PROCFREEFUNC        PBt = 28
	PBt_ARCHIVECALLBACKFUNC PBt = 29
)

var PBt_name = map[int32]string{
	0:  "STRING",
	1:  "TOKEN",
	2:  "INT",
	3:  "FLOAT",
	4:  "STRINGARRAY",
	5:  "TOKENARRAY",
	6:  "INTARRAY",
	7:  "FLOATARRAY",
	8:  "BOOLEAN",
	9:  "COLOR",
	10: "POINT",
	11: "COLORARRAY",
	12: "POINTARRAY",
	13: "INTERVAL",
	14: "NORMAL",
	15: "HPOINT",
	16: "MATRIX",
	17: "BASIS",
	18: "BOUND",
	19: "LIGHTHANDLE",
	20: "OBJECTHANDLE",
	21: "SHADERHANDLE",
	22: "ARCHIVEHANDLE",
	23: "FILTERFUNC",
	24: "ERRORHANDLE",
	25: "PROCSUBDIVFUNC",
	26: "PROC2SUBDIVFUNC",
	27: "PROC2BOUNDFUNC",
	28: "PROCFREEFUNC",
	29: "ARCHIVECALLBACKFUNC",
}
var PBt_value = map[string]int32{
	"STRING":              0,
	"TOKEN":               1,
	"INT":                 2,
	"FLOAT":               3,
	"STRINGARRAY":         4,
	"TOKENARRAY":          5,
	"INTARRAY":            6,
	"FLOATARRAY":          7,
	"BOOLEAN":             8,
	"COLOR":               9,
	"POINT":               10,
	"COLORARRAY":          11,
	"POINTARRAY":          12,
	"INTERVAL":            13,
	"NORMAL":              14,
	"HPOINT":              15,
	"MATRIX":              16,
	"BASIS":               17,
	"BOUND":               18,
	"LIGHTHANDLE":         19,
	"OBJECTHANDLE":        20,
	"SHADERHANDLE":        21,
	"ARCHIVEHANDLE":       22,
	"FILTERFUNC":          23,
	"ERRORHANDLE":         24,
	"PROCSUBDIVFUNC":      25,
	"PROC2SUBDIVFUNC":     26,
	"PROC2BOUNDFUNC":      27,
	"PROCFREEFUNC":        28,
	"ARCHIVECALLBACKFUNC": 29,
}

func (x PBt) String() string {
	return proto.EnumName(PBt_name, int32(x))
}
func (PBt) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PBiValue struct {
	Type        PBt       `protobuf:"varint,1,opt,name=Type,json=type,enum=core.PBt" json:"Type,omitempty"`
	String_     string    `protobuf:"bytes,3,opt,name=String,json=string" json:"String,omitempty"`
	StringArray []string  `protobuf:"bytes,4,rep,name=StringArray,json=stringArray" json:"StringArray,omitempty"`
	Boolean     bool      `protobuf:"varint,5,opt,name=Boolean,json=boolean" json:"Boolean,omitempty"`
	Int         int64     `protobuf:"varint,8,opt,name=Int,json=int" json:"Int,omitempty"`
	IntArray    []int64   `protobuf:"varint,9,rep,packed,name=IntArray,json=intArray" json:"IntArray,omitempty"`
	Float       float64   `protobuf:"fixed64,10,opt,name=Float,json=float" json:"Float,omitempty"`
	FloatArray  []float64 `protobuf:"fixed64,11,rep,packed,name=FloatArray,json=floatArray" json:"FloatArray,omitempty"`
}

func (m *PBiValue) Reset()                    { *m = PBiValue{} }
func (m *PBiValue) String() string            { return proto.CompactTextString(m) }
func (*PBiValue) ProtoMessage()               {}
func (*PBiValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PBi struct {
	Name   string      `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Values []*PBiValue `protobuf:"bytes,2,rep,name=Values,json=values" json:"Values,omitempty"`
}

func (m *PBi) Reset()                    { *m = PBi{} }
func (m *PBi) String() string            { return proto.CompactTextString(m) }
func (*PBi) ProtoMessage()               {}
func (*PBi) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PBi) GetValues() []*PBiValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*PBiValue)(nil), "core.PBiValue")
	proto.RegisterType((*PBi)(nil), "core.PBi")
	proto.RegisterEnum("core.PBt", PBt_name, PBt_value)
}

func init() { proto.RegisterFile("ri.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x93, 0xc1, 0x6e, 0x9b, 0x40,
	0x10, 0x86, 0x4b, 0x16, 0x63, 0x18, 0x12, 0x67, 0x33, 0x49, 0x13, 0x9a, 0x36, 0x15, 0xca, 0xa1,
	0x42, 0x3d, 0xe4, 0xe0, 0x3e, 0xc1, 0x82, 0x71, 0x4c, 0x43, 0x58, 0x6b, 0x4c, 0xac, 0xf6, 0x48,
	0x2a, 0x52, 0x21, 0x25, 0x10, 0x11, 0x5a, 0xc9, 0xcf, 0xd8, 0xa7, 0xe8, 0x9b, 0x54, 0xbb, 0x6b,
	0xb7, 0xbd, 0xcd, 0xff, 0xcd, 0xcc, 0xbf, 0xf3, 0x23, 0x01, 0x6e, 0xdf, 0x5c, 0x3d, 0xf7, 0xdd,
	0xd0, 0xa1, 0xfd, 0xad, 0xeb, 0xeb, 0xcb, 0xdf, 0x16, 0xb8, 0xcb, 0xb8, 0x59, 0x57, 0x8f, 0x3f,
	0x6a, 0xbc, 0x00, 0xbb, 0xdc, 0x3c, 0xd7, 0x81, 0x15, 0x5a, 0xd1, 0x64, 0xea, 0x5d, 0xa9, 0x89,
	0xab, 0x65, 0x3c, 0x90, 0x3d, 0x6c, 0x9e, 0x6b, 0x3c, 0x05, 0x67, 0x35, 0xf4, 0x4d, 0xfb, 0x3d,
	0x60, 0xa1, 0x15, 0x79, 0xe4, 0xbc, 0x68, 0x85, 0x21, 0xf8, 0x86, 0x8b, 0xbe, 0xaf, 0x36, 0x81,
	0x1d, 0xb2, 0xc8, 0x23, 0xff, 0xe5, 0x1f, 0xc2, 0x00, 0xc6, 0x71, 0xd7, 0x3d, 0xd6, 0x55, 0x1b,
	0x8c, 0x42, 0x2b, 0x72, 0x69, 0x7c, 0x6f, 0x24, 0x72, 0x60, 0x59, 0x3b, 0x04, 0x6e, 0x68, 0x45,
	0x8c, 0x58, 0xd3, 0x0e, 0x78, 0x0e, 0x6e, 0xd6, 0x0e, 0xc6, 0xca, 0x0b, 0x59, 0xc4, 0xc8, 0x6d,
	0xb6, 0x1a, 0x4f, 0x60, 0x34, 0x7f, 0xec, 0xaa, 0x21, 0x80, 0xd0, 0x8a, 0x2c, 0x1a, 0x3d, 0x28,
	0x81, 0xef, 0x01, 0x34, 0x35, 0x3b, 0x7e, 0xc8, 0x22, 0x8b, 0xe0, 0xe1, 0x2f, 0xb9, 0x14, 0xc0,
	0x96, 0x71, 0x83, 0x08, 0x76, 0x51, 0x3d, 0x99, 0x74, 0x1e, 0xd9, 0x6d, 0xf5, 0x54, 0xe3, 0x07,
	0x70, 0x74, 0xf4, 0x97, 0x60, 0x2f, 0x64, 0x91, 0x3f, 0x9d, 0xec, 0x32, 0x9b, 0x2f, 0x42, 0xce,
	0x4f, 0xdd, 0xfd, 0xf8, 0x8b, 0x29, 0x8f, 0x01, 0x01, 0x9c, 0x55, 0x49, 0x59, 0x71, 0xcd, 0x5f,
	0xa1, 0x07, 0xa3, 0x52, 0xde, 0xa4, 0x05, 0xb7, 0x70, 0x0c, 0x2c, 0x2b, 0x4a, 0xbe, 0xa7, 0xd8,
	0x3c, 0x97, 0xa2, 0xe4, 0x0c, 0x0f, 0xc1, 0x37, 0xa3, 0x82, 0x48, 0x7c, 0xe5, 0x36, 0x4e, 0x00,
	0xf4, 0xbc, 0xd1, 0x23, 0xdc, 0x07, 0x37, 0x2b, 0x4a, 0xa3, 0x1c, 0xd5, 0xd5, 0x9b, 0x46, 0x8f,
	0xd1, 0x87, 0x71, 0x2c, 0x65, 0x9e, 0x8a, 0x82, 0xbb, 0xca, 0x36, 0x91, 0xb9, 0x24, 0xee, 0xa9,
	0x72, 0x29, 0xd5, 0x63, 0xa0, 0x56, 0x34, 0x35, 0x2b, 0xbe, 0xd2, 0xba, 0x65, 0xf4, 0xfe, 0xf6,
	0x81, 0x94, 0xd6, 0x22, 0xe7, 0x07, 0xea, 0xf4, 0x42, 0xd2, 0xad, 0xc8, 0xf9, 0x44, 0xd5, 0x0b,
	0xe3, 0x72, 0xa8, 0xea, 0x5b, 0x51, 0x52, 0xf6, 0x85, 0x73, 0x65, 0x1e, 0x8b, 0x55, 0xb6, 0xe2,
	0x47, 0xba, 0x94, 0x77, 0xc5, 0x8c, 0xa3, 0x4a, 0x92, 0x67, 0xd7, 0x8b, 0x72, 0x21, 0x8a, 0x59,
	0x9e, 0xf2, 0x63, 0xe4, 0xb0, 0x2f, 0xe3, 0xcf, 0x69, 0xb2, 0x23, 0x27, 0x8a, 0xac, 0x16, 0x62,
	0x96, 0xd2, 0x96, 0xbc, 0xc6, 0x23, 0x38, 0x10, 0x94, 0x2c, 0xb2, 0x75, 0xba, 0x45, 0xa7, 0x3a,
	0x62, 0x96, 0x97, 0x29, 0xcd, 0xef, 0x8a, 0x84, 0x9f, 0x29, 0xdf, 0x94, 0x48, 0xee, 0x76, 0x02,
	0x44, 0x98, 0x2c, 0x49, 0x26, 0xab, 0xbb, 0x78, 0x96, 0xad, 0xf5, 0xd0, 0x1b, 0x3c, 0x86, 0x43,
	0xc5, 0xa6, 0xff, 0xc1, 0xf3, 0xdd, 0xe0, 0x54, 0x5f, 0xa8, 0xd9, 0x5b, 0x75, 0x82, 0x62, 0x73,
	0x4a, 0x53, 0x4d, 0xde, 0xe1, 0x19, 0x1c, 0x6f, 0x4f, 0x48, 0x44, 0x9e, 0xc7, 0x22, 0xb9, 0xd1,
	0x8d, 0x8b, 0x7b, 0x47, 0xff, 0x01, 0x9f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xce, 0x92,
	0x8d, 0x0d, 0x03, 0x00, 0x00,
}
